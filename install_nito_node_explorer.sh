#!/bin/bash

# V√©rification des privil√®ges root
if [ "$EUID" -ne 0 ]; then
  echo "Ce script doit √™tre ex√©cut√© en tant que root."
  exit 1
fi

# V√©rification et installation de cron si n√©cessaire
if ! command -v cron &> /dev/null; then
  echo "Cron n'est pas install√©. Installation en cours..."
  apt update
  if [ $? -ne 0 ]; then
    echo "Erreur : √âchec de la mise √† jour des d√©p√¥ts apt pour installer cron. V√©rifiez votre connexion Internet."
    exit 1
  fi
  apt install -y cron
  if [ $? -ne 0 ]; then
    echo "Erreur : √âchec de l'installation de cron. V√©rifiez votre connexion Internet et les d√©p√¥ts apt."
    exit 1
  fi
  systemctl enable cron
  systemctl start cron
  if ! systemctl status cron | grep -q "active (running)"; then
    echo "Erreur : √âchec du d√©marrage du service cron. V√©rifiez avec 'systemctl status cron'."
    exit 1
  fi
  echo "Cron install√© et d√©marr√© avec succ√®s."
else
  echo "Cron est d√©j√† install√©. V√©rification de son √©tat..."
  if ! systemctl status cron | grep -q "active (running)"; then
    echo "Cron est install√© mais ne fonctionne pas. Tentative de d√©marrage..."
    systemctl start cron
    systemctl enable cron
    if ! systemctl status cron | grep -q "active (running)"; then
      echo "Erreur : √âchec du d√©marrage du service cron. V√©rifiez avec 'systemctl status cron'."
      exit 1
    fi
  fi
  echo "Cron est op√©rationnel."
fi

# √âtape 1 : Demander le domaine
echo "Entrez le nom de domaine pour l‚Äôexplorateur (ex. : nito-explorer.exemple.fr) :"
read DOMAIN

# Demander si l'utilisateur veut installer un nouveau n≈ìud ou utiliser un n≈ìud local
echo "Voulez-vous installer un nouveau n≈ìud NitoCoin ou utiliser un n≈ìud local existant ?"
echo "1) Installer un nouveau n≈ìud"
echo "2) Utiliser un n≈ìud local existant"
read -p "Entrez votre choix (1 ou 2) : " NODE_CHOICE

# D√©finir les chemins dynamiques 
echo "Entrez le r√©pertoire d'instalation (ex. : /var/www pour installer dans /var/www/*) :"
read INSTALL_DIR
if [ -z "$INSTALL_DIR" ]; then
  INSTALL_DIR="/var/www"
fi
INSTALL_DIR=$(echo "$INSTALL_DIR" | sed 's:/*$::')
if echo "$INSTALL_DIR" | grep -q "[[:space:]]"; then
  echo "Erreur : Le r√©pertoire d'installation ne doit pas contenir d'espaces."
  exit 1
fi
if ! echo "$INSTALL_DIR" | grep -qE '^/[a-zA-Z0-9/_-]+$'; then
  echo "Erreur : Le r√©pertoire d'installation contient des caract√®res non valides. Utilisez uniquement des lettres, chiffres, /, _, ou -."
  exit 1
fi

# D√©finir les chemins dynamiques
NITO_DIR="$INSTALL_DIR/.nito"
NITO_NODE_DIR="$INSTALL_DIR/nito-node"
EXPLORER_DIR="$INSTALL_DIR/explorer"
TEMP_DIR="$INSTALL_DIR/NitoNode-Explorer"

# Installer curl si n√©cessaire pour les requ√™tes RPC
if ! command -v curl &> /dev/null; then
  echo "Installation de curl pour tester la connexion RPC..."
  apt install -y curl
  if [ $? -ne 0 ]; then
    echo "Erreur : √âchec de l'installation de curl. V√©rifiez votre connexion Internet."
    exit 1
  fi
fi

# Selon le choix de l'utilisateur
if [ "$NODE_CHOICE" = "1" ]; then
  # Installation compl√®te d'un nouveau n≈ìud
  echo "Installation d'un nouveau n≈ìud NitoCoin..."

  # Demander les informations RPC pour le nouveau n≈ìud
  echo "Entrez le port RPC du n≈ìud Nito (ex. : 8825 pour Nito) :"
  read RPC_PORT
  echo "Entrez le nom d'utilisateur RPC pour le n≈ìud Nito (ex. : user) :"
  read RPC_USER
  echo "Entrez le mot de passe RPC pour le n≈ìud Nito (ex. : pass) :"
  read RPC_PASSWORD

  # V√©rifier que les identifiants RPC ne contiennent pas de caract√®res sp√©ciaux probl√©matiques
  if echo "$RPC_USER" | grep -q "[[:space:]\"']"; then
    echo "Erreur : Le nom d'utilisateur RPC ne doit pas contenir d'espaces, de guillemets ou d'apostrophes."
    exit 1
  fi
  if echo "$RPC_PASSWORD" | grep -q "[[:space:]\"']"; then
    echo "Erreur : Le mot de passe RPC ne doit pas contenir d'espaces, de guillemets ou d'apostrophes."
    exit 1
  fi

  # √âtape 2 : Cr√©er le dossier temporaire pour les t√©l√©chargements
  echo "Cr√©ation du dossier temporaire dans $TEMP_DIR..."
  mkdir -p "$TEMP_DIR"
  if [ ! -d "$TEMP_DIR" ]; then
    echo "Erreur : Impossible de cr√©er le dossier temporaire $TEMP_DIR."
    exit 1
  fi

  # S'assurer que le r√©pertoire d'installation a les bonnes permissions 
  if [ ! -d "$INSTALL_DIR" ]; then
    mkdir -p "$INSTALL_DIR"
    chown root:root "$INSTALL_DIR"
    chmod 755 "$INSTALL_DIR"
  fi
  if ! touch "$INSTALL_DIR/.test_write" 2>/dev/null; then
    echo "Erreur : L'utilisateur root n'a pas les permissions d'√©criture dans $INSTALL_DIR. V√©rifiez les permissions du r√©pertoire."
    exit 1
  fi
  rm -f "$INSTALL_DIR/.test_write"
  mkdir -p "$NITO_DIR" 2>/dev/null
  if ! touch "$NITO_DIR/.test_write" 2>/dev/null; then
    echo "Erreur : L'utilisateur root n'a pas les permissions d'√©criture dans $NITO_DIR. V√©rifiez les permissions du r√©pertoire."
    exit 1
  fi
  rm -f "$NITO_DIR/.test_write"
  mkdir -p "$EXPLORER_DIR" 2>/dev/null
  if ! touch "$EXPLORER_DIR/.test_write" 2>/dev/null; then
    echo "Erreur : L'utilisateur root n'a pas les permissions d'√©criture dans $EXPLORER_DIR. V√©rifiez les permissions du r√©pertoire."
    exit 1
  fi
  rm -f "$EXPLORER_DIR/.test_write"

  # √âtape 3 : Mise √† jour et installation des d√©pendances n√©cessaires 
  echo "Mise √† jour du syst√®me et installation des d√©pendances..."
  sudo apt update
  if [ $? -ne 0 ]; then
    echo "Erreur : √âchec de la mise √† jour des d√©p√¥ts apt. V√©rifiez votre connexion Internet."
    exit 1
  fi
  sudo apt upgrade -y
  sudo apt install -y curl cmake git build-essential libtool autotools-dev automake pkg-config bsdmainutils python3 software-properties-common ufw net-tools jq unzip libzmq3-dev libminiupnpc-dev libssl-dev libevent-dev wget
  if [ $? -ne 0 ]; then
    echo "Erreur : √âchec de l'installation des d√©pendances. V√©rifiez votre connexion Internet et les d√©p√¥ts apt."
    exit 1
  fi

  # √âtape 4 : Installer une version de base de Node.js et npm pour NVM
  echo "Installation d'une version de base de Node.js et npm pour NVM..."
  sudo apt install -y nodejs npm
  if ! command -v npm &> /dev/null; then
    echo "Erreur : npm n'a pas pu √™tre install√©. V√©rifiez votre connexion Internet et les d√©p√¥ts apt."
    exit 1
  fi

  # √âtape 5 : T√©l√©chargement et installation du Node NitoCoin 
  echo "üöÄ Installation du Node NitoCoin d√©marr√©e..."
  cd "$INSTALL_DIR"
  wget https://github.com/NitoNetwork/Nito-core/releases/download/v2.0.1/nito-2-0-1-x86_64-linux-gnu.tar.gz
  if [ $? -ne 0 ] || [ ! -f "nito-2-0-1-x86_64-linux-gnu.tar.gz" ]; then
    echo "Erreur : √âchec du t√©l√©chargement de nito-2-0-1-x86_64-linux-gnu.tar.gz. V√©rifiez votre connexion Internet."
    exit 1
  fi
  tar -xzvf nito-2-0-1-x86_64-linux-gnu.tar.gz
  if [ $? -ne 0 ]; then
    echo "Erreur : √âchec de l'extraction de nito-2-0-1-x86_64-linux-gnu.tar.gz. Le fichier peut √™tre corrompu."
    exit 1
  fi
  rm nito-2-0-1-x86_64-linux-gnu.tar.gz
  mv nito-*/ nito-node

  # Ajouter les binaires au PATH globalement via /etc/environment
  if ! grep -q "$NITO_NODE_DIR/bin" /etc/environment; then
      echo "PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$NITO_NODE_DIR/bin\"" | sudo tee /etc/environment > /dev/null
  fi

  # Ajouter le PATH √† ~/.bashrc pour les sessions shell de root
  if ! grep -q "$NITO_NODE_DIR/bin" ~/.bashrc; then
      echo "export PATH=\"\$PATH:$NITO_NODE_DIR/bin\"" | sudo tee -a ~/.bashrc > /dev/null
  fi

  # Appliquer le PATH imm√©diatement dans ce script
  export PATH="$PATH:$NITO_NODE_DIR/bin"

  # √âtape 6 : Configuration du fichier nito.conf avec les identifiants personnalis√©s
  mkdir -p "$NITO_DIR"
  cat <<EOF > "$NITO_DIR/nito.conf"
maxconnections=300
server=1
daemon=1
txindex=1
prune=0
datadir=$NITO_DIR
port=8820
rpcuser=$RPC_USER
rpcpassword=$RPC_PASSWORD
rpcport=$RPC_PORT
rpcbind=0.0.0.0
rpcallowip=0.0.0.0/0
zmqpubhashblock=tcp://0.0.0.0:28825
listen=1
listenonion=0
proxy=
bind=0.0.0.0
EOF

  # Supprimer conflit potentiel
  rm -f "$NITO_NODE_DIR/nito.conf"

  # √âtape 7 : Configuration du service systemd NitoCoin 
  cat <<EOF > /etc/systemd/system/nitocoin.service
[Unit]
Description=NitoCoin Node
After=network.target

[Service]
User=root
Group=root
Type=forking
ExecStart=$NITO_NODE_DIR/bin/nitod -daemon -conf=$NITO_DIR/nito.conf
ExecStop=$NITO_NODE_DIR/bin/nito-cli -conf=$NITO_DIR/nito.conf stop
Restart=on-failure
RestartSec=15
StartLimitInterval=60
StartLimitBurst=5
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF

  # Activation du service systemd
  sudo systemctl daemon-reload
  sudo systemctl enable nitocoin
  sudo systemctl start nitocoin
  if ! sudo systemctl status nitocoin | grep -q "active (running)"; then
    echo "Erreur : √âchec du d√©marrage du service nitocoin. V√©rifiez les logs avec 'journalctl -u nitocoin'."
    exit 1
  fi

  # √âtape 8 : Configuration du firewall UFW pour le n≈ìud
  echo "Configuration du firewall pour le n≈ìud Nito..."
  sudo ufw allow 8820/tcp   # Port r√©seau P2P
  sudo ufw allow ssh        # SSH pour s√©curit√©

  # √âtape 9 : Attendre que le n≈ìud soit compl√®tement synchronis√©
  echo "‚è≥ Attente que le n≈ìud NitoCoin soit compl√®tement synchronis√©..."
  sleep 25

  # V√©rifier l'√©tat de la synchronisation avec getblockchaininfo
  while true; do
    BLOCKCHAIN_INFO=$(nito-cli -conf="$NITO_DIR/nito.conf" getblockchaininfo)
    if [ $? -ne 0 ]; then
      echo "Erreur : Impossible de r√©cup√©rer l'√©tat de la synchronisation du n≈ìud. V√©rifiez les logs avec 'journalctl -u nitocoin'."
      exit 1
    fi

    IBD=$(echo "$BLOCKCHAIN_INFO" | jq -r '.initialblockdownload')
    BLOCKS=$(echo "$BLOCKCHAIN_INFO" | jq -r '.blocks')
    HEADERS=$(echo "$BLOCKCHAIN_INFO" | jq -r '.headers')

    if [ "$IBD" = "false" ] && [ "$BLOCKS" -eq "$HEADERS" ]; then
      echo "üéâ Le n≈ìud NitoCoin est compl√®tement synchronis√© ! Blocs : $BLOCKS"
      break
    else
      echo "Synchronisation en cours... Blocs : $BLOCKS / $HEADERS"
      sleep 5
    fi
  done

  # V√©rifier une derni√®re fois le nombre de blocs
  echo "üîç V√©rification finale du nombre de blocs :"
  nito-cli -conf="$NITO_DIR/nito.conf" getblockcount
  if [ $? -ne 0 ]; then
    echo "Erreur : √âchec de la v√©rification RPC avec nito-cli. V√©rifiez que le n≈ìud est op√©rationnel et que les identifiants RPC sont corrects."
    exit 1
  fi

  # Recharger .bashrc pour appliquer le PATH au shell courant
  source ~/.bashrc

  echo "üéâ Node NitoCoin op√©rationnel et synchronis√©. Poursuite avec l'installation de l'explorateur..."

elif [ "$NODE_CHOICE" = "2" ]; then
  # Utilisation d'un n≈ìud local existant
  echo "Recherche d'un n≈ìud NitoCoin existant sur le syst√®me..."
  NITO_CONF=$(find / -type f -name "nito.conf" 2>/dev/null | head -n 1)

  if [ -n "$NITO_CONF" ]; then
    echo "Fichier nito.conf trouv√© √† : $NITO_CONF"
    # Extraire les informations RPC
    RPC_USER=$(grep "^rpcuser=" "$NITO_CONF" | sed 's/rpcuser=//' | head -n 1)
    RPC_PASSWORD=$(grep "^rpcpassword=" "$NITO_CONF" | sed 's/rpcpassword=//' | head -n 1)
    RPC_PORT=$(grep "^rpcport=" "$NITO_CONF" | sed 's/rpcport=//' | head -n 1)

    # V√©rifier que toutes les infos sont pr√©sentes
    if [ -z "$RPC_USER" ] || [ -z "$RPC_PASSWORD" ] || [ -z "$RPC_PORT" ]; then
      echo "Erreur : Le fichier $NITO_CONF ne contient pas toutes les informations RPC n√©cessaires (rpcuser, rpcpassword, rpcport)."
      echo "Veuillez fournir manuellement les identifiants RPC du n≈ìud local."
      echo "Entrez le port RPC du n≈ìud Nito existant (ex. : 8825) :"
      read RPC_PORT
      echo "Entrez le nom d'utilisateur RPC du n≈ìud Nito existant (ex. : user) :"
      read RPC_USER
      echo "Entrez le mot de passe RPC du n≈ìud Nito existant (ex. : pass) :"
      read RPC_PASSWORD
    else
      echo "Informations RPC extraites de $NITO_CONF :"
      echo " - rpcuser: $RPC_USER"
      echo " - rpcpassword: $RPC_PASSWORD"
      echo " - rpcport: $RPC_PORT"

      # Tester la connexion RPC avec curl
      echo "Test de la connexion RPC au n≈ìud local (127.0.0.1:$RPC_PORT)..."
      RPC_TEST=$(curl -s --user "$RPC_USER:$RPC_PASSWORD" --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockchaininfo", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:"$RPC_PORT" 2>/dev/null)
      if echo "$RPC_TEST" | grep -q "result"; then
        echo "‚úÖ Connexion RPC r√©ussie ! Utilisation du n≈ìud existant."
      else
        echo "‚ùå √âchec de la connexion RPC au n≈ìud local (127.0.0.1:$RPC_PORT). Le n≈ìud est peut-√™tre arr√™t√© ou les identifiants sont incorrects."
        echo "Veuillez fournir manuellement les identifiants RPC corrects."
        echo "Entrez le port RPC du n≈ìud Nito existant (ex. : 8825) :"
        read RPC_PORT
        echo "Entrez le nom d'utilisateur RPC du n≈ìud Nito existant (ex. : user) :"
        read RPC_USER
        echo "Entrez le mot de passe RPC du n≈ìud Nito existant (ex. : pass) :"
        read RPC_PASSWORD
      fi
    fi
  else
    echo "Aucun fichier nito.conf trouv√© sur le syst√®me."
    echo "Veuillez fournir manuellement les identifiants RPC du n≈ìud local."
    echo "Entrez le port RPC du n≈ìud Nito existant (ex. : 8825) :"
    read RPC_PORT
    echo "Entrez le nom d'utilisateur RPC du n≈ìud Nito existant (ex. : user) :"
    read RPC_USER
    echo "Entrez le mot de passe RPC du n≈ìud Nito existant (ex. : pass) :"
    read RPC_PASSWORD
  fi

  # V√©rifier que les identifiants RPC ne contiennent pas de caract√®res sp√©ciaux probl√©matiques
  if echo "$RPC_USER" | grep -q "[[:space:]\"']"; then
    echo "Erreur : Le nom d'utilisateur RPC ne doit pas contenir d'espaces, de guillemets ou d'apostrophes."
    exit 1
  fi
  if echo "$RPC_PASSWORD" | grep -q "[[:space:]\"']"; then
    echo "Erreur : Le mot de passe RPC ne doit pas contenir d'espaces, de guillemets ou d'apostrophes."
    exit 1
  fi

  echo "Poursuite avec l'installation de l'explorateur en utilisant le n≈ìud local..."
else
  echo "Choix invalide. Veuillez entrer 1 ou 2."
  exit 1
fi

# √âtape 10 : Configurer le pare-feu pour l'explorateur
echo "Configuration du pare-feu pour l'explorateur..."
ufw allow 80    # Pour Certbot et laiss√© ouvert comme demand√©
ufw allow 443   # HTTPS
ufw --force enable

# √âtape 11 : Installer Node.js avec NVM (version 16.20.2 pour compatibilit√©)
echo "Installation de Node.js 16.20.2 via NVM..."
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
if [ $? -ne 0 ]; then
  echo "Erreur : √âchec de l'installation de NVM. V√©rifiez votre connexion Internet."
  exit 1
fi
export NVM_DIR="/root/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
nvm install 16.20.2
if [ $? -ne 0 ]; then
  echo "Erreur : √âchec de l'installation de Node.js 16.20.2. V√©rifiez votre connexion Internet."
  exit 1
fi
nvm use 16.20.2
node -v
npm -v

# D√©finir le chemin de npm dynamiquement
NPM_PATH="/root/.nvm/versions/node/v16.20.2/bin/npm"

# √âtape 12 : Installer Docker
echo "Installation de Docker..."
apt install -y docker.io
if [ $? -ne 0 ]; then
  echo "Erreur : √âchec de l'installation de Docker. V√©rifiez votre connexion Internet et les d√©p√¥ts apt."
  exit 1
fi
systemctl start docker
systemctl enable docker

# V√©rification Docker
if ! docker --version; then
  echo "Erreur : Docker n‚Äôest pas install√© correctement."
  exit 1
fi

# √âtape 13 : Lancer MongoDB 7.0.2 en conteneur Docker avec red√©marrage automatique
echo "Lancement de MongoDB 7.0.2 via Docker..."
docker pull mongo:7.0.2
if [ $? -ne 0 ]; then
  echo "Erreur : √âchec du t√©l√©chargement de l'image MongoDB. V√©rifiez votre connexion Internet."
  exit 1
fi
mkdir -p /data/db /var/log/mongodb
docker run -d --name mongodb \
  --restart unless-stopped \
  -p 27017:27017 \
  -v /data/db:/data/db \
  -v /var/log/mongodb:/var/log/mongodb \
  -e MONGO_INITDB_ROOT_USERNAME=eiquidus \
  -e MONGO_INITDB_ROOT_PASSWORD=Nd^p2d77ceBX!L \
  mongo:7.0.2

# V√©rification MongoDB
sleep 5 # Attendre que le conteneur d√©marre
if docker ps | grep mongodb; then
  echo "MongoDB 7.0.2 est actif dans Docker."
else
  echo "Erreur : MongoDB ne d√©marre pas. V√©rifiez avec 'docker logs mongodb'."
  exit 1
fi

# Configuration de la base de donn√©es
echo "Configuration de la base de donn√©es MongoDB..."
docker exec -i mongodb mongosh -u eiquidus -p Nd^p2d77ceBX!L <<EOF
use explorerdb
db.createUser({ user: "eiquidus", pwd: "Nd^p2d77ceBX!L", roles: ["readWrite"] })
exit
EOF

# √âtape 14 : Installer Nginx
echo "Installation de Nginx..."
apt install nginx -y
if [ $? -ne 0 ]; then
  echo "Erreur : √âchec de l'installation de Nginx. V√©rifiez votre connexion Internet et les d√©p√¥ts apt."
  exit 1
fi
systemctl start nginx
systemctl enable nginx

# √âtape 15 : Installer eIquidus
echo "T√©l√©chargement d‚ÄôeIquidus dans $EXPLORER_DIR..."
git clone https://github.com/team-exor/eiquidus "$EXPLORER_DIR"
if [ $? -ne 0 ]; then
  echo "Erreur : √âchec du clonage du d√©p√¥t eIquidus. V√©rifiez votre connexion Internet."
  exit 1
fi
cd "$EXPLORER_DIR"
"$NPM_PATH" install --only=prod
if [ $? -ne 0 ]; then
  echo "Erreur : √âchec de l'installation des d√©pendances d'eIquidus. V√©rifiez votre connexion Internet et les logs npm."
  exit 1
fi

# √âtape 16 : T√©l√©charger et int√©grer les images Nito et settings.json
echo "T√©l√©chargement des images Nito et settings.json..."
# Assurer que TEMP_DIR existe juste avant les t√©l√©chargements
mkdir -p "$TEMP_DIR"
if [ ! -d "$TEMP_DIR" ]; then
  echo "Erreur : Impossible de cr√©er le dossier temporaire $TEMP_DIR."
  exit 1
fi
wget -O "$TEMP_DIR/settings.json" "https://raw.githubusercontent.com/biigbang0001/NitoNode-Explorer/main/settings.json"
if [ $? -ne 0 ] || [ ! -f "$TEMP_DIR/settings.json" ]; then
  echo "Erreur : √âchec du t√©l√©chargement de settings.json. V√©rifiez votre connexion Internet."
  exit 1
fi
wget -O "$TEMP_DIR/logo.png" "https://raw.githubusercontent.com/biigbang0001/NitoNode-Explorer/main/logo.png"
if [ $? -ne 0 ] || [ ! -f "$TEMP_DIR/logo.png" ]; then
  echo "Erreur : √âchec du t√©l√©chargement de logo.png. V√©rifiez votre connexion Internet."
  exit 1
fi
wget -O "$TEMP_DIR/header-logo.png" "https://raw.githubusercontent.com/biigbang0001/NitoNode-Explorer/main/header-logo.png"
if [ $? -ne 0 ] || [ ! -f "$TEMP_DIR/header-logo.png" ]; then
  echo "Erreur : √âchec du t√©l√©chargement de header-logo.png. V√©rifiez votre connexion Internet."
  exit 1
fi
wget -O "$TEMP_DIR/page-title-img.png" "https://raw.githubusercontent.com/biigbang0001/NitoNode-Explorer/main/page-title-img.png"
if [ $? -ne 0 ] || [ ! -f "$TEMP_DIR/page-title-img.png" ]; then
  echo "Erreur : √âchec du t√©l√©chargement de page-title-img.png. V√©rifiez votre connexion Internet."
  exit 1
fi
wget -O "$TEMP_DIR/favicon-32.png" "https://raw.githubusercontent.com/biigbang0001/NitoNode-Explorer/main/favicon-32.png"
if [ $? -ne 0 ] || [ ! -f "$TEMP_DIR/favicon-32.png" ]; then
  echo "Erreur : √âchec du t√©l√©chargement de favicon-32.png. V√©rifiez votre connexion Internet."
  exit 1
fi
wget -O "$TEMP_DIR/favicon-128.png" "https://raw.githubusercontent.com/biigbang0001/NitoNode-Explorer/main/favicon-128.png"
if [ $? -ne 0 ] || [ ! -f "$TEMP_DIR/favicon-128.png" ]; then
  echo "Erreur : √âchec du t√©l√©chargement de favicon-128.png. V√©rifiez votre connexion Internet."
  exit 1
fi
wget -O "$TEMP_DIR/favicon-180.png" "https://raw.githubusercontent.com/biigbang0001/NitoNode-Explorer/main/favicon-180.png"
if [ $? -ne 0 ] || [ ! -f "$TEMP_DIR/favicon-180.png" ]; then
  echo "Erreur : √âchec du t√©l√©chargement de favicon-180.png. V√©rifiez votre connexion Internet."
  exit 1
fi
wget -O "$TEMP_DIR/favicon-192.png" "https://raw.githubusercontent.com/biigbang0001/NitoNode-Explorer/main/favicon-192.png"
if [ $? -ne 0 ] || [ ! -f "$TEMP_DIR/favicon-192.png" ]; then
  echo "Erreur : √âchec du t√©l√©chargement de favicon-192.png. V√©rifiez votre connexion Internet."
  exit 1
fi
wget -O "$TEMP_DIR/external.png" "https://raw.githubusercontent.com/biigbang0001/NitoNode-Explorer/main/external.png"
if [ $? -ne 0 ] || [ ! -f "$TEMP_DIR/external.png" ]; then
  echo "Erreur : √âchec du t√©l√©chargement de external.png. V√©rifiez votre connexion Internet."
  exit 1
fi
wget -O "$TEMP_DIR/coingecko.png" "https://raw.githubusercontent.com/biigbang0001/NitoNode-Explorer/main/coingecko.png"
if [ $? -ne 0 ] || [ ! -f "$TEMP_DIR/coingecko.png" ]; then
  echo "Erreur : √âchec du t√©l√©chargement de coingecko.png. V√©rifiez votre connexion Internet."
  exit 1
fi

# Copier les images dans les bons dossiers
mkdir -p "$EXPLORER_DIR/public/img"
cp "$TEMP_DIR/favicon-32.png" "$EXPLORER_DIR/public/"
cp "$TEMP_DIR/favicon-128.png" "$EXPLORER_DIR/public/"
cp "$TEMP_DIR/favicon-180.png" "$EXPLORER_DIR/public/"
cp "$TEMP_DIR/favicon-192.png" "$EXPLORER_DIR/public/"
cp "$TEMP_DIR/logo.png" "$EXPLORER_DIR/public/img/"
cp "$TEMP_DIR/header-logo.png" "$EXPLORER_DIR/public/img/"
cp "$TEMP_DIR/page-title-img.png" "$EXPLORER_DIR/public/img/"
cp "$TEMP_DIR/external.png" "$EXPLORER_DIR/public/img/"
cp "$TEMP_DIR/coingecko.png" "$EXPLORER_DIR/public/img/"

# Copier settings.json dans explorer/ et modifier les identifiants et les chemins SSL
cp "$TEMP_DIR/settings.json" "$EXPLORER_DIR/"
sed -i "s/\"username\": \"user\"/\"username\": \"$RPC_USER\"/" "$EXPLORER_DIR/settings.json"
sed -i "s/\"password\": \"pass\"/\"password\": \"$RPC_PASSWORD\"/" "$EXPLORER_DIR/settings.json"
sed -i "s/\"port\": 8825/\"port\": $RPC_PORT/" "$EXPLORER_DIR/settings.json"
sed -i "s/\"address\": \"localhost\"/\"address\": \"127.0.0.1\"/" "$EXPLORER_DIR/settings.json"
sed -i "s|/etc/letsencrypt/live/nito-explorer.nitopool.fr/cert.pem|/etc/letsencrypt/live/$DOMAIN/cert.pem|" "$EXPLORER_DIR/settings.json"
sed -i "s|/etc/letsencrypt/live/nito-explorer.nitopool.fr/chain.pem|/etc/letsencrypt/live/$DOMAIN/chain.pem|" "$EXPLORER_DIR/settings.json"
sed -i "s|/etc/letsencrypt/live/nito-explorer.nitopool.fr/privkey.pem|/etc/letsencrypt/live/$DOMAIN/privkey.pem|" "$EXPLORER_DIR/settings.json"

# √âtape 17 : Installer Certbot et g√©n√©rer le certificat via Nginx
echo "Installation de Certbot..."
apt install snapd -y
snap install core; snap refresh core
snap install --classic certbot
ln -s /snap/bin/certbot /usr/bin/certbot

echo "Configuration temporaire de Nginx pour Certbot..."
cat > /etc/nginx/sites-available/default <<EOF
server {
    listen 80;
    server_name $DOMAIN;
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }
}
EOF
nginx -t
if [ $? -ne 0 ]; then
  echo "Erreur : √âchec de la v√©rification de la configuration Nginx. V√©rifiez les logs avec 'nginx -t'."
  exit 1
fi
systemctl restart nginx

echo "G√©n√©ration du certificat SSL..."
certbot --nginx -d "$DOMAIN" --non-interactive --agree-tos --email admin@"$DOMAIN"
if [ ! -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
  echo "Erreur : √âchec de la g√©n√©ration du certificat SSL. V√©rifiez la configuration de votre domaine et les logs de Certbot (/var/log/letsencrypt/letsencrypt.log)."
  exit 1
fi

# √âtape 18 : Configurer Nginx avec SSL
echo "Configuration finale de Nginx avec SSL..."
cat > /etc/nginx/sites-available/eiquidus <<EOF
server {
    listen 443 ssl;
    server_name $DOMAIN;

    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;

    location / {
        proxy_pass http://localhost:3001;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}

server {
    listen 80;
    server_name $DOMAIN;
    return 301 https://\$host\$request_uri;
}
EOF
ln -s /etc/nginx/sites-available/eiquidus /etc/nginx/sites-enabled/
rm /etc/nginx/sites-enabled/default
nginx -t
if [ $? -ne 0 ]; then
  echo "Erreur : √âchec de la v√©rification de la configuration Nginx. V√©rifiez les logs avec 'nginx -t'."
  exit 1
fi
systemctl restart nginx

# √âtape 19 : Installer et lancer avec PM2
echo "Installation de PM2 et d√©marrage..."
"$NPM_PATH" install -g pm2
if ! command -v pm2 &> /dev/null; then
  echo "Erreur : PM2 n'a pas pu √™tre install√© correctement. Tentative de r√©installation..."
  "$NPM_PATH" install -g pm2 --force
fi
if ! command -v pm2 &> /dev/null; then
  export PATH="$PATH:/root/.nvm/versions/node/v16.20.2/bin"
  echo "export PATH=\"\$PATH:/root/.nvm/versions/node/v16.20.2/bin\"" >> ~/.bashrc
  source ~/.bashrc
fi
if ! command -v pm2 &> /dev/null; then
  echo "Erreur : PM2 n'est toujours pas accessible. V√©rifiez l'installation de Node.js et npm. Essayez d'ex√©cuter '$NPM_PATH install -g pm2' manuellement."
  exit 1
fi
cd "$EXPLORER_DIR"
"$NPM_PATH" run start-pm2

# √âtape 20 : Configurer PM2 pour red√©marrer automatiquement au boot
echo "Configuration de PM2 pour red√©marrage automatique..."
pm2 startup systemd -u root
pm2 save

# √âtape 21 : Synchronisation initiale et configuration du cron
echo "Synchronisation initiale de l'explorateur (en arri√®re-plan)..."
cd "$EXPLORER_DIR"
"$NPM_PATH" run sync-blocks > "$EXPLORER_DIR/sync-initial.log" 2>&1 &
SYNC_PID=$!
echo "La synchronisation initiale a √©t√© lanc√©e en arri√®re-plan. Vous pouvez v√©rifier l'√©tat de la synchronisation en acc√©dant √† : https://$DOMAIN"
echo "Pour suivre l'avancement, consultez les logs avec : tail -f $EXPLORER_DIR/sync-initial.log"

# Cr√©er un script shell pour la synchronisation
cat <<EOF > "$EXPLORER_DIR/sync-explorer.sh"
#!/bin/bash
export NVM_DIR="/root/.nvm"
[ -s "\$NVM_DIR/nvm.sh" ] && \. "\$NVM_DIR/nvm.sh"
cd $EXPLORER_DIR
$NPM_PATH run sync-blocks >> $EXPLORER_DIR/sync-cron.log 2>&1
EOF

chmod +x "$EXPLORER_DIR/sync-explorer.sh"

echo "Configuration du cron pour synchronisation automatique toutes les minutes..."
echo "*/1 * * * * /bin/bash $EXPLORER_DIR/sync-explorer.sh" | crontab -

echo "V√©rification de la configuration du cron..."
crontab -l

# Nettoyage du dossier temporaire
echo "Nettoyage du dossier temporaire $TEMP_DIR..."
rm -rf "$TEMP_DIR"

# V√©rification des r√©pertoires d'installation
echo "V√©rification des r√©pertoires d'installation..."
if [ "$NODE_CHOICE" = "1" ]; then
  if [ -d "$NITO_NODE_DIR" ] && [ -d "$EXPLORER_DIR" ] && [ -d "$NITO_DIR" ]; then
    echo "Les r√©pertoires d'installation sont corrects :"
    ls -ld "$NITO_NODE_DIR" "$EXPLORER_DIR" "$NITO_DIR"
  else
    echo "Erreur : Certains r√©pertoires d'installation sont manquants. V√©rifiez $NITO_NODE_DIR, $EXPLORER_DIR, et $NITO_DIR."
    exit 1
  fi
else
  if [ -d "$EXPLORER_DIR" ]; then
    echo "Le r√©pertoire de l'explorateur est correct :"
    ls -ld "$EXPLORER_DIR"
  else
    echo "Erreur : Le r√©pertoire de l'explorateur est manquant. V√©rifiez $EXPLORER_DIR."
    exit 1
  fi
fi

# Diagnostics suppl√©mentaires
echo "üîç Diagnostics suppl√©mentaires :"
echo "√âtat du n≈ìud NitoCoin :"
curl -s --user "$RPC_USER:$RPC_PASSWORD" --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockchaininfo", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:"$RPC_PORT" 2>/dev/null
echo "√âtat de l'explorateur :"
pm2 list
echo "Logs de la synchronisation initiale (derni√®res 20 lignes) :"
if [ -f "$EXPLORER_DIR/sync-initial.log" ]; then
  tail -n 20 "$EXPLORER_DIR/sync-initial.log"
else
  echo "Aucun log de synchronisation initiale trouv√©. V√©rifiez avec 'tail -f $EXPLORER_DIR/sync-initial.log'."
fi

echo "üéâ Installation compl√®te termin√©e !"
echo "Node NitoCoin et l'explorateur eIquidus sont op√©rationnels."
echo "Acc√©dez √† l'explorateur via : https://$DOMAIN"
echo "D√©tails du n≈ìud :"
echo " - Port RPC : $RPC_PORT"
echo " - Username : $RPC_USER"
echo " - Password : $RPC_PASSWORD"
echo " - R√©pertoire d'installation : $INSTALL_DIR"
echo "Pour v√©rifier les logs du cron, utilisez : journalctl -u cron"
